name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    name: AI-Assisted Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript checks
      id: typescript-check
      run: |
        npm run typecheck 2>&1 | tee typescript-errors.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "typescript-errors=true" >> $GITHUB_OUTPUT
        else
          echo "typescript-errors=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      
    - name: Run linting
      id: lint-check
      run: |
        npm run lint 2>&1 | tee lint-errors.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "lint-errors=true" >> $GITHUB_OUTPUT
        else
          echo "lint-errors=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      
    - name: Run tests with coverage
      id: test-check
      run: |
        npm run test:run -- --coverage 2>&1 | tee test-results.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "test-failures=true" >> $GITHUB_OUTPUT
        else
          echo "test-failures=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      
    - name: Analyze code changes
      id: analyze-changes
      run: |
        # Get changed files
        git diff --name-only origin/main...HEAD > changed-files.txt
        
        # Count changes
        TOTAL_CHANGES=$(wc -l < changed-files.txt)
        TS_CHANGES=$(grep -c '\.ts$\|\.tsx$' changed-files.txt || echo 0)
        
        echo "total-changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
        echo "typescript-changes=$TS_CHANGES" >> $GITHUB_OUTPUT
        
        # Get diff for review
        git diff origin/main...HEAD > code-diff.patch
        
    - name: Generate AI review prompts
      id: generate-prompts
      run: |
        cat > ai-review-prompt.md << 'EOF'
        # Code Review Analysis Request
        
        ## Context
        This is a pull request for @johnqh/lib, a React Native-compatible shared utilities library for 0xmail.box projects.
        
        ## Architecture Principles
        - Platform-agnostic business logic in src/business/
        - Interface-first design with platform implementations
        - Dependency injection pattern
        - React hooks for UI integration
        - Comprehensive TypeScript typing
        
        ## Changes Summary
        - Total files changed: ${{ steps.analyze-changes.outputs.total-changes }}
        - TypeScript files changed: ${{ steps.analyze-changes.outputs.typescript-changes }}
        - TypeScript errors: ${{ steps.typescript-check.outputs.typescript-errors }}
        - Lint errors: ${{ steps.lint-check.outputs.lint-errors }}
        - Test failures: ${{ steps.test-check.outputs.test-failures }}
        
        ## Review Areas to Focus On
        1. **Architecture Compliance**: Does the code follow the established patterns?
        2. **Type Safety**: Are TypeScript types properly defined and used?
        3. **Platform Compatibility**: Will this work on both web and React Native?
        4. **Business Logic Separation**: Is domain logic properly separated from platform code?
        5. **Error Handling**: Are errors handled consistently?
        6. **Testing**: Are there adequate tests for the changes?
        7. **Performance**: Any potential performance issues?
        8. **Security**: Any security concerns?
        
        ## Code Changes
        See attached code-diff.patch for the actual changes.
        EOF
        
    - name: Create review comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the generated content
          const prompt = fs.readFileSync('ai-review-prompt.md', 'utf8');
          
          // Create a detailed review comment
          const reviewComment = `## 🤖 AI Code Review Assistant
          
          This PR has been automatically analyzed. Here's what I found:
          
          ### 📊 Analysis Summary
          - **Files Changed**: ${{ steps.analyze-changes.outputs.total-changes }}
          - **TypeScript Files**: ${{ steps.analyze-changes.outputs.typescript-changes }}
          - **Type Check**: ${{ steps.typescript-check.outputs.typescript-errors == 'true' && '❌ Has errors' || '✅ Passed' }}
          - **Lint Check**: ${{ steps.lint-check.outputs.lint-errors == 'true' && '❌ Has errors' || '✅ Passed' }}
          - **Tests**: ${{ steps.test-check.outputs.test-failures == 'true' && '❌ Some failures' || '✅ All passed' }}
          
          ### 🔍 Areas to Review
          Based on the project's architecture, please ensure:
          
          1. **Platform Abstraction**: New services follow the interface → implementation pattern
          2. **Business Logic**: Domain logic is in \`src/business/core/\` and platform-agnostic
          3. **Type Safety**: All public APIs have proper TypeScript definitions
          4. **React Hooks**: UI-related logic uses hooks in \`src/business/hooks/\`
          5. **Error Handling**: Consistent error handling and custom error types
          6. **Testing**: Comprehensive tests for business logic and hooks
          
          ### 📝 Next Steps
          - Review the changes against the project's [Development Guidelines](./DEVELOPMENT.md)
          - Check the [API Documentation](./docs/API.md) for consistency
          - Ensure new types are documented in [Type Documentation](./docs/TYPES.md)
          - Use the provided [templates](./templates/) for new services or hooks
          
          ${${{ steps.typescript-check.outputs.typescript-errors == 'true' || steps.lint-check.outputs.lint-errors == 'true' || steps.test-check.outputs.test-failures == 'true' }} ? '### ⚠️ Issues Found\n\nPlease fix the TypeScript, lint, or test issues before merging.' : '### ✅ All Checks Passed\n\nThe code looks good from a technical perspective!'}
          
          ---
          *This review was generated automatically. Human reviewers should focus on business logic, architecture decisions, and user experience.*`;
          
          // Post the comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reviewComment
          });
          
    - name: Add labels based on analysis
      uses: actions/github-script@v7
      with:
        script: |
          const labels = [];
          
          // Add size label
          const totalChanges = parseInt('${{ steps.analyze-changes.outputs.total-changes }}');
          if (totalChanges > 20) {
            labels.push('size/large');
          } else if (totalChanges > 10) {
            labels.push('size/medium');
          } else {
            labels.push('size/small');
          }
          
          // Add type labels
          const tsChanges = parseInt('${{ steps.analyze-changes.outputs.typescript-changes }}');
          if (tsChanges > 0) {
            labels.push('typescript');
          }
          
          // Add status labels
          if ('${{ steps.typescript-check.outputs.typescript-errors }}' === 'true') {
            labels.push('needs-fix/typescript');
          }
          if ('${{ steps.lint-check.outputs.lint-errors }}' === 'true') {
            labels.push('needs-fix/lint');
          }
          if ('${{ steps.test-check.outputs.test-failures }}' === 'true') {
            labels.push('needs-fix/tests');
          }
          
          if (labels.length === 0 || labels.every(l => l.startsWith('size/'))) {
            labels.push('ready-for-review');
          }
          
          // Apply labels
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: labels
          });

  suggest-improvements:
    name: Suggest Code Improvements
    runs-on: ubuntu-latest
    needs: ai-review
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Analyze code patterns
      id: pattern-analysis
      run: |
        # Check for common patterns that could be improved
        
        echo "## Pattern Analysis" > suggestions.md
        
        # Check for missing interfaces
        if git diff --name-only origin/main...HEAD | grep -E "\.ts$" | xargs grep -l "class.*Service" | head -5 > service-files.txt; then
          echo "### Service Interface Compliance" >> suggestions.md
          while read -r file; do
            if ! grep -q "implements.*Service" "$file"; then
              echo "- Consider adding interface for service in: $file" >> suggestions.md
            fi
          done < service-files.txt
        fi
        
        # Check for error handling patterns
        if git diff origin/main...HEAD | grep -E "\+.*catch|throw" > error-patterns.txt; then
          echo "### Error Handling" >> suggestions.md
          echo "- Review error handling patterns for consistency with project standards" >> suggestions.md
        fi
        
        # Check for React hooks
        if git diff origin/main...HEAD | grep -E "\+.*use[A-Z]" > hook-patterns.txt; then
          echo "### React Hooks" >> suggestions.md
          echo "- Ensure new hooks follow the established patterns in src/business/hooks/" >> suggestions.md
        fi
        
    - name: Post improvement suggestions
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const suggestions = fs.readFileSync('suggestions.md', 'utf8');
            
            const comment = `## 💡 Code Improvement Suggestions
            
            ${suggestions}
            
            ### General Recommendations
            - Follow the [Service Template](./templates/service-template.ts) for new services
            - Use the [Hook Template](./templates/hook-template.ts) for new React hooks  
            - Add comprehensive tests using the [Test Template](./templates/test-template.ts)
            - Update documentation if adding new public APIs
            
            ### Resources
            - [Development Guidelines](./DEVELOPMENT.md)
            - [API Documentation](./docs/API.md)
            - [Type Documentation](./docs/TYPES.md)
            
            ---
            *These suggestions are automatically generated based on code patterns.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('No specific suggestions generated');
          }