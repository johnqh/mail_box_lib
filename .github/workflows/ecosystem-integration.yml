name: Ecosystem Integration & Quality Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20.18.0"
  
jobs:
  ecosystem-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [mail_box_lib, mail_box_components, mail_box_contracts]
    
    steps:
      - name: Checkout ecosystem
        uses: actions/checkout@v4
        with:
          path: ${{ matrix.project }}

      - name: Checkout related projects
        run: |
          if [ "${{ matrix.project }}" = "mail_box_lib" ]; then
            git clone https://github.com/johnqh/mail_box_components.git ../mail_box_components || echo "Components repo not accessible"
            git clone https://github.com/johnqh/mail_box_contracts.git ../mail_box_contracts || echo "Contracts repo not accessible"
            git clone https://github.com/johnqh/di.git ../di || echo "DI repo not accessible"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: |
          npm ci
          # Install peer dependencies if they exist
          if [ -f "package.json" ] && grep -q "peerDependencies" package.json; then
            echo "Installing peer dependencies..."
            npm run postinstall || echo "No postinstall script"
          fi

      - name: Run quality checks
        working-directory: ${{ matrix.project }}
        run: |
          # Type checking
          npm run typecheck || echo "TypeScript check failed"
          
          # Linting
          npm run lint || echo "Linting failed"
          
          # Testing with coverage
          npm run test:coverage || npm test || echo "Tests failed"
          
          # Build validation
          npm run build || echo "Build failed"

      - name: Run AI health analysis
        working-directory: ${{ matrix.project }}
        run: |
          if [ -f "scripts/ai/analyze-health.js" ]; then
            npm run analyze:health || echo "Health analysis not available"
          fi

      - name: Cross-project dependency validation
        if: matrix.project == 'mail_box_lib'
        working-directory: ${{ matrix.project }}
        run: |
          echo "Validating cross-project dependencies..."
          
          # Check if related packages are properly linked
          npm list @johnqh/di || echo "@johnqh/di not found"
          npm list @johnqh/mail_box_contracts || echo "@johnqh/mail_box_contracts not found"
          
          # Run dependency analysis
          npm run analyze:deps || echo "Dependency analysis not available"

  integration-tests:
    runs-on: ubuntu-latest
    needs: ecosystem-validation
    
    steps:
      - name: Checkout mail_box_lib
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run integration test suite
        run: |
          # Run comprehensive integration tests
          npm run check-all || echo "Comprehensive checks failed"
          
          # Performance analysis
          npm run analyze:size || echo "Size analysis not available"
          
          # Security audit
          npm audit --audit-level=moderate || echo "Security audit found issues"

      - name: Generate ecosystem report
        run: |
          echo "# Ecosystem Integration Report" > ecosystem-report.md
          echo "Generated: $(date)" >> ecosystem-report.md
          echo "" >> ecosystem-report.md
          
          echo "## Package Versions" >> ecosystem-report.md
          npm list --depth=0 >> ecosystem-report.md 2>/dev/null || true
          
          echo "" >> ecosystem-report.md
          echo "## Build Status" >> ecosystem-report.md
          npm run build && echo "✅ Build successful" >> ecosystem-report.md || echo "❌ Build failed" >> ecosystem-report.md
          
          echo "" >> ecosystem-report.md
          echo "## Test Results" >> ecosystem-report.md
          npm test && echo "✅ Tests passed" >> ecosystem-report.md || echo "❌ Tests failed" >> ecosystem-report.md

      - name: Upload ecosystem report
        uses: actions/upload-artifact@v4
        with:
          name: ecosystem-report
          path: ecosystem-report.md
          retention-days: 30

  performance-monitoring:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run performance analysis
        run: |
          # Build and analyze bundle size
          npm run build
          npm run analyze:size || echo "Size analysis not available"
          
          # Performance monitoring
          if [ -f "scripts/performance-monitor.js" ]; then
            npm run performance-check || echo "Performance check not available"
          fi

      - name: Performance regression check
        run: |
          echo "Checking for performance regressions..."
          
          # Compare bundle sizes (if previous data exists)
          CURRENT_SIZE=$(du -sh dist/ | cut -f1)
          echo "Current build size: $CURRENT_SIZE"
          
          # Store metrics for trend analysis
          mkdir -p .performance-metrics
          echo "{\"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"buildSize\": \"$CURRENT_SIZE\"}" > .performance-metrics/$(date +%Y%m%d-%H%M%S).json

      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: .performance-metrics/
          retention-days: 90

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          # Run npm audit
          npm audit --audit-level=high --production
          
          # Additional security checks
          echo "Running additional security validations..."
          
          # Check for secrets in code
          if command -v grep &> /dev/null; then
            echo "Scanning for potential secrets..."
            grep -r -i "api[_-]key\|secret\|password\|token" src/ || echo "No obvious secrets found"
          fi

      - name: Dependency vulnerability scan
        run: |
          # Advanced dependency analysis
          npm run analyze:deps || echo "Dependency analysis not available"
          
          # Check for outdated packages
          npm outdated || echo "Some packages may be outdated"