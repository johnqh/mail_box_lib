#!/usr/bin/env node

/**
 * CI/CD Integration Script
 * Provides hooks and workflows for continuous integration
 */

import { promises as fs } from 'fs';
import path from 'path';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(color, ...args) {
  console.log(color, ...args, colors.reset);
}

class CIIntegration {
  async setupGitHooksIntegration() {
    log(colors.cyan, 'üîß Setting up Git hooks integration...');
    
    const gitHooksDir = path.join(process.cwd(), '.git', 'hooks');
    
    try {
      await fs.access(gitHooksDir);
    } catch {
      log(colors.yellow, '‚ö†Ô∏è  Git hooks directory not found - initializing git repository first');
      return false;
    }
    
    // Pre-commit hook
    const preCommitHook = `#!/bin/sh
# Generated by @johnqh/lib CI integration
# Pre-commit quality checks

echo "üîç Running pre-commit quality checks..."

# Run quick quality checks
npm run quick-check

if [ $? -ne 0 ]; then
  echo "‚ùå Pre-commit checks failed. Please fix issues before committing."
  echo "üí° Run 'npm run lint:fix' and 'npm run format' to auto-fix most issues"
  exit 1
fi

echo "‚úÖ Pre-commit checks passed!"
`;

    // Pre-push hook
    const prePushHook = `#!/bin/sh
# Generated by @johnqh/lib CI integration
# Pre-push comprehensive validation

echo "üöÄ Running pre-push validation..."

# Run comprehensive quality check
npm run quality-check

if [ $? -ne 0 ]; then
  echo "‚ùå Pre-push validation failed. Please address quality issues before pushing."
  echo "üí° Review .quality-report.json for detailed recommendations"
  exit 1
fi

echo "‚úÖ Pre-push validation passed!"
`;

    await fs.writeFile(path.join(gitHooksDir, 'pre-commit'), preCommitHook, { mode: 0o755 });
    await fs.writeFile(path.join(gitHooksDir, 'pre-push'), prePushHook, { mode: 0o755 });
    
    log(colors.green, '‚úÖ Git hooks configured successfully');
    return true;
  }

  async generateGitHubActionsWorkflow() {
    log(colors.cyan, '‚öôÔ∏è  Generating GitHub Actions workflow...');
    
    const workflowDir = path.join(process.cwd(), '.github', 'workflows');
    await fs.mkdir(workflowDir, { recursive: true });
    
    const workflow = `name: Project Health Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js $\{{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: $\{{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run comprehensive quality checks
      run: npm run quality-check
    
    - name: Run performance monitoring
      run: npm run performance-check
    
    - name: Generate project health dashboard
      run: npm run health-dashboard
    
    - name: Upload health reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: health-reports-$\{{ matrix.node-version }}
        path: |
          .quality-report.json
          .performance-report.json
          .health-report.json
    
    - name: Comment PR with health summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const healthReport = JSON.parse(fs.readFileSync('.health-report.json', 'utf8'));
            const score = healthReport.overallScore;
            const emoji = score >= 92 ? 'üéâ' : score >= 80 ? '‚ö†Ô∏è' : '‚ùå';
            
            const comment = \`## \${emoji} Project Health Report
            
            **Overall Score: \${score}/100**
            
            - üîí Security: \${healthReport.metrics.security.score}/100
            - üîç Code Quality: \${healthReport.metrics.quality.score}/100
            - ‚ö° Performance: \${healthReport.metrics.performance.score}/100
            - üß™ Test Coverage: \${healthReport.metrics.coverage.score}/100
            - üì¶ Dependencies: \${healthReport.metrics.dependencies.score}/100
            
            \${healthReport.recommendations.length > 0 ? 
              '### üí° Recommendations:\\n' + 
              healthReport.recommendations.slice(0, 3).map(r => 
                \`- **\${r.category}**: \${r.issue} - \${r.action}\`
              ).join('\\n') : 
              '### ‚úÖ No recommendations - excellent project health!'
            }
            
            Generated by [@johnqh/lib Health Dashboard](https://github.com/0xmail/mail_box_lib)\`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post health report comment:', error);
          }

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Security audit
      run: npm audit --audit-level=high
    - name: License check
      run: npx license-checker --summary

  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Build project
      run: npm run build
    - name: Run tests with coverage
      run: npm run test:coverage
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
`;

    await fs.writeFile(
      path.join(workflowDir, 'health-check.yml'),
      workflow
    );
    
    log(colors.green, '‚úÖ GitHub Actions workflow generated');
  }

  async generateNpmScripts() {
    log(colors.cyan, 'üìù Adding CI integration scripts to package.json...');
    
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));
    
    const newScripts = {
      'health-dashboard': 'node scripts/project-health-dashboard.js',
      'ci:quick': 'npm run lint && npm run typecheck',
      'ci:test': 'npm run test:run && npm run build',
      'ci:quality': 'npm run quality-check',
      'ci:full': 'npm run ci:quick && npm run ci:test && npm run ci:quality',
      'ci:setup-hooks': 'node scripts/ci-integration.js --setup-hooks',
      'validate:commit': 'npm run ci:quick',
      'validate:push': 'npm run ci:quality',
      'validate:release': 'npm run ci:full && npm run performance-check',
    };
    
    packageJson.scripts = {
      ...packageJson.scripts,
      ...newScripts,
    };
    
    await fs.writeFile(
      packageJsonPath,
      JSON.stringify(packageJson, null, 2)
    );
    
    log(colors.green, '‚úÖ CI scripts added to package.json');
  }

  async generateDocumentation() {
    log(colors.cyan, 'üìö Generating CI/CD documentation...');
    
    const ciDocsDir = path.join(process.cwd(), 'docs', 'ci');
    await fs.mkdir(ciDocsDir, { recursive: true });
    
    const ciDocs = `# CI/CD Integration

This project includes comprehensive CI/CD integration for maintaining code quality and project health.

## Available Commands

### Quick Validation
\`\`\`bash
npm run ci:quick      # Fast linting and type checking
npm run validate:commit # Pre-commit validation
\`\`\`

### Comprehensive Validation
\`\`\`bash
npm run ci:quality    # Full quality assessment
npm run ci:full       # Complete validation suite
npm run validate:push # Pre-push validation
\`\`\`

### Health Monitoring
\`\`\`bash
npm run health-dashboard    # Comprehensive health report
npm run quality-check      # Quality assessment with scoring
npm run performance-check  # Performance analysis
\`\`\`

## Git Hooks

The project includes pre-commit and pre-push hooks:

- **Pre-commit**: Runs quick quality checks (lint + typecheck)
- **Pre-push**: Runs comprehensive quality validation

Setup git hooks:
\`\`\`bash
npm run ci:setup-hooks
\`\`\`

## GitHub Actions

The project includes a comprehensive GitHub Actions workflow that:

1. **Runs on multiple Node.js versions** (18.x, 20.x)
2. **Performs quality checks** on every push and PR
3. **Generates health reports** and uploads as artifacts
4. **Comments on PRs** with health summary
5. **Security auditing** and license checking
6. **Build and test validation** with coverage reporting

## Health Dashboard

The health dashboard provides a comprehensive view of project health:

- **Security**: Vulnerability assessment
- **Code Quality**: Linting, type safety, formatting
- **Performance**: Build time, test time, bundle size
- **Test Coverage**: Test metrics and pass rates
- **Dependencies**: Outdated packages and updates

Target health score: **92/100**

## Integration with Development Workflow

### Local Development
1. Pre-commit hooks ensure quality on every commit
2. Pre-push hooks run comprehensive validation
3. Health dashboard provides regular project health insights

### CI/CD Pipeline  
1. Automated quality checks on every PR
2. Multi-node version testing
3. Security and license validation
4. Performance monitoring and regression detection
5. Health score tracking over time

## Customization

### Adding Custom Checks
Add new validation steps to:
- \`.github/workflows/health-check.yml\`
- Git hooks in \`.git/hooks/\`
- Package.json scripts

### Health Score Tuning
Modify scoring weights in:
- \`scripts/project-health-dashboard.js\`
- \`scripts/quality-check.js\`
- \`scripts/performance-monitor.js\`

## Troubleshooting

### Git Hooks Not Running
\`\`\`bash
# Ensure hooks have execute permissions
chmod +x .git/hooks/pre-commit
chmod +x .git/hooks/pre-push

# Or reinstall hooks
npm run ci:setup-hooks
\`\`\`

### CI/CD Pipeline Failures
1. Check health report artifacts in GitHub Actions
2. Run local validation: \`npm run ci:full\`
3. Review recommendations in \`.health-report.json\`

### Health Score Issues
1. Run \`npm run health-dashboard\` for detailed analysis
2. Follow recommendations in the generated report
3. Use \`npm run quality-check\` for actionable fixes
`;

    await fs.writeFile(path.join(ciDocsDir, 'README.md'), ciDocs);
    
    log(colors.green, '‚úÖ CI/CD documentation generated');
  }
}

async function main() {
  const args = process.argv.slice(2);
  const ci = new CIIntegration();
  
  if (args.includes('--setup-hooks')) {
    await ci.setupGitHooksIntegration();
    return;
  }
  
  log(colors.cyan, 'üöÄ Setting up CI/CD integration...\n');
  
  await ci.setupGitHooksIntegration();
  await ci.generateGitHubActionsWorkflow();
  await ci.generateNpmScripts();
  await ci.generateDocumentation();
  
  log(colors.green, '\n‚úÖ CI/CD integration setup complete!');
  log(colors.blue, '\nüìã Next steps:');
  log(colors.blue, '   1. Commit the generated CI/CD configuration');
  log(colors.blue, '   2. Push to GitHub to activate workflows');
  log(colors.blue, '   3. Run `npm run health-dashboard` to check project health');
  log(colors.blue, '   4. Review and address any recommendations');
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    log(colors.red, 'üí• CI integration setup failed:', error.message);
    process.exit(1);
  });
}

export { CIIntegration };